name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Code Quality and Security Checks
  quality-check:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run security scan
        run: |
          pip install safety
          safety check --full-report

      - name: Run code formatting check
        run: |
          black --check --diff .
          isort --check-only --diff .

      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Run type checking
        run: |
          mypy . --ignore-missing-imports

      - name: Check for hardcoded secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --exclude-files .git/

  # Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: testing
          tags: astrology-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Docker tests
        run: |
          docker run --rm astrology-api:test

  # Dependency Vulnerability Scan
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # API Integration Tests
  integration-test:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build and start API
        run: |
          docker-compose -f docker-compose.yml up -d --build
          sleep 30

      - name: Run integration tests
        run: |
          pip install httpx pytest-asyncio
          python -m pytest tests/integration/ -v

      - name: Test API health
        run: |
          curl -f http://localhost:8000/health || exit 1

      - name: Test API documentation
        run: |
          curl -f http://localhost:8000/docs || exit 1

      - name: Cleanup
        run: docker-compose -f docker-compose.yml down -v

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [docker]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
      redis:
        image: redis:7

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup k6
        run: |
          sudo apt update
          sudo apt install -y wget
          wget https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz
          tar -xzf k6-v0.45.0-linux-amd64.tar.gz
          sudo mv k6-v0.45.0-linux-amd64/k6 /usr/local/bin/

      - name: Build and start API
        run: |
          docker-compose -f docker-compose.yml up -d --build
          sleep 30

      - name: Run performance tests
        run: |
          k6 run --out json=perf-results.json tests/performance/load_test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v5
        with:
          name: performance-results
          path: perf-results.json

      - name: Cleanup
        run: docker-compose -f docker-compose.yml down -v

  # Deploy to Staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, test, docker, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: astrology-api
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          # Build and tag image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest .

          # Push images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster astrology-staging \
            --service astrology-api-service \
            --force-new-deployment \
            --region us-east-1

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster astrology-staging \
            --services astrology-api-service \
            --region us-east-1

      - name: Run smoke tests on staging
        run: |
          STAGING_URL="https://staging-api.astrologia.br"
          curl -f $STAGING_URL/health || exit 1
          echo "Staging deployment successful!"

  # Deploy to Production (manual trigger only)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, test, docker, integration-test, performance-test]
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push production image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: astrology-api
          IMAGE_TAG: prod-${{ github.sha }}
        run: |
          # Build production image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          # Push images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to production ECS
        run: |
          aws ecs update-service \
            --cluster astrology-production \
            --service astrology-api-service \
            --force-new-deployment \
            --region us-east-1

      - name: Wait for production deployment
        run: |
          aws ecs wait services-stable \
            --cluster astrology-production \
            --services astrology-api-service \
            --region us-east-1

      - name: Run production smoke tests
        run: |
          PROD_URL="https://api.astrologia.br"
          curl -f $PROD_URL/health || exit 1
          echo "Production deployment successful!"

      - name: Create GitHub deployment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment via GitHub Actions'
            });

  # Notify on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-check, test, docker, dependency-scan]
    if: always()

    steps:
      - name: Send notification to Discord
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            **CI/CD Pipeline Results**
            Status: ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}

            ✅ Quality Check: ${{ needs.quality-check.result }}
            ✅ Tests: ${{ needs.test.result }}
            ✅ Docker: ${{ needs.docker.result }}
            ✅ Security: ${{ needs.dependency-scan.result }}

            [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})