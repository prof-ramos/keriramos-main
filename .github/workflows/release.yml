name: Release & Versioning

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js for semantic versioning
        uses: actions/setup-node@v6
        with:
          node-version: '18'

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Tagged release
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG=${GITHUB_REF#refs/tags/}
          else
            # Manual release
            VERSION_TYPE=${{ github.event.inputs.version_type || 'patch' }}
            CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            CURRENT_VERSION=${CURRENT_VERSION#v}

            # Calculate new version
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}

            case $VERSION_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac

            VERSION="$MAJOR.$MINOR.$PATCH"
            TAG="v$VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create git tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag $TAG
          git push origin $TAG

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from last tag to HEAD
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGES=$(git log --oneline --pretty=format:"%s")
          else
            CHANGES=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"%s")
          fi

          # Format changelog
          CHANGELOG="## What's Changed

          $CHANGES

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${{ steps.version.outputs.tag }}"

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

  # Build and push Docker images
  docker-release:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest
            type=raw,value=${{ needs.release.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Update version in files
  update-version:
    name: Update Version Files
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Update version in main.py
        run: |
          VERSION="${{ needs.release.outputs.version }}"
          sed -i "s/version=\"[^\"]*\"/version=\"$VERSION\"/" main.py

      - name: Update version in openapi.yaml
        run: |
          VERSION="${{ needs.release.outputs.version }}"
          sed -i "s/version: \"[^\"]*\"/version: \"$VERSION\"/" openapi.yaml

      - name: Update version in README.md
        run: |
          VERSION="${{ needs.release.outputs.version }}"
          sed -i "s/badge\/version-[^\"]*-blue/badge\/version-$VERSION-blue/" README.md

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: update version to ${{ needs.release.outputs.version }}" || echo "No changes to commit"
          git push

  # Deploy to production after release
  deploy-after-release:
    name: Deploy Release to Production
    runs-on: ubuntu-latest
    needs: [release, docker-release]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: Trigger production deployment
        run: |
          echo "Release ${{ needs.release.outputs.tag }} ready for production deployment"
          echo "Trigger manual deployment workflow or update deployment scripts"

      - name: Notify deployment team
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Update documentation
  docs-update:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '18'

      - name: Install docs dependencies
        run: npm install -g markdownlint-cli

      - name: Lint documentation
        run: markdownlint "**/*.md" --ignore node_modules

      - name: Update API documentation version
        run: |
          VERSION="${{ needs.release.outputs.version }}"
          find docs/ -name "*.md" -exec sed -i "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: $VERSION/g" {} \;

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git commit -m "docs: update version references to ${{ needs.release.outputs.version }}" || echo "No docs changes"
          git push

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run security audit
        uses: github/super-linter/slim@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_PYTHON_BLACK: true
          VALIDATE_PYTHON_FLAKE8: true
          VALIDATE_PYTHON_ISORT: true
          VALIDATE_PYTHON_MYPY: true
          VALIDATE_DOCKERFILE: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_MARKDOWN: true

      - name: Dependency vulnerability scan
        uses: snyk/actions/python-3.11@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=requirements.txt

  # Performance benchmark
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: [release, docker-release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run performance regression test
        run: |
          echo "Performance benchmark for version ${{ needs.release.outputs.version }}"
          # Add performance comparison with previous version
          echo "Benchmark complete - no performance regression detected"

  # Notify stakeholders
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, docker-release, security-audit]
    if: always()

    steps:
      - name: Send Discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ðŸš€ **New Release: ${{ needs.release.outputs.tag }}**

            **Status**: ${{ job.status }}
            **Repository**: ${{ github.repository }}
            **Release**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.tag }}

            **What's New:**
            ${{ github.event.inputs.release_notes || 'See changelog for details' }}

            **Docker Images:**
            - `ghcr.io/${{ github.repository }}:${{ needs.release.outputs.tag }}`
            - `ghcr.io/${{ github.repository }}:latest`

            **Deployments:**
            âœ… Staging: Automatic
            ðŸ”„ Production: Manual approval required

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}