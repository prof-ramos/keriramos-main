# CodeRabbit Configuration for Brazilian Astrology API
# Comprehensive code review and quality assurance configuration

version: 2

# General Configuration
reviews:
  # Enable high-level code review
  high_level:
    enabled: true
    summarize_pull_request: true
    explain_code: true

  # Enable security-focused reviews
  security:
    enabled: true
    vulnerability_scanning: true
    dependency_scanning: true

  # Enable performance reviews
  performance:
    enabled: true
    complexity_analysis: true
    memory_usage: true

# Language-specific configurations
languages:
  python:
    # Code quality rules
    quality:
      enabled: true
      rules:
        - name: "line_length"
          max_length: 88
          severity: "warning"

        - name: "function_length"
          max_lines: 50
          severity: "warning"

        - name: "complexity"
          max_complexity: 10
          severity: "warning"

        - name: "imports"
          sort_imports: true
          remove_unused: true
          severity: "error"

        - name: "docstrings"
          required: true
          style: "google"
          severity: "warning"

        - name: "type_hints"
          required: true
          severity: "warning"

    # Security rules
    security:
      enabled: true
      rules:
        - name: "sql_injection"
          severity: "error"

        - name: "xss_vulnerability"
          severity: "error"

        - name: "hardcoded_secrets"
          severity: "error"

        - name: "weak_crypto"
          severity: "warning"

        - name: "insecure_random"
          severity: "warning"

        - name: "path_traversal"
          severity: "error"

        - name: "command_injection"
          severity: "error"

    # Testing rules
    testing:
      enabled: true
      coverage_threshold: 80
      rules:
        - name: "test_coverage"
          minimum: 80
          severity: "warning"

        - name: "test_naming"
          pattern: "test_.*"
          severity: "error"

        - name: "async_tests"
          required_for_async: true
          severity: "warning"

    # Performance rules
    performance:
      enabled: true
      rules:
        - name: "n_plus_one_queries"
          severity: "warning"

        - name: "memory_leaks"
          severity: "warning"

        - name: "inefficient_loops"
          severity: "info"

        - name: "large_objects"
          max_size: 1000000  # 1MB
          severity: "warning"

# File-specific rules
files:
  # Python files
  "**/*.py":
    rules:
      - name: "shebang"
        required: true
        severity: "warning"

      - name: "encoding"
        required: "utf-8"
        severity: "error"

      - name: "main_guard"
        required: true
        severity: "warning"

  # Configuration files
  "**/*.json":
    rules:
      - name: "json_format"
        validate: true
        severity: "error"

  "**/*.yaml":
    rules:
      - name: "yaml_format"
        validate: true
        severity: "error"

  "**/*.yml":
    rules:
      - name: "yaml_format"
        validate: true
        severity: "error"

  # Docker files
  "**/Dockerfile*":
    rules:
      - name: "docker_best_practices"
        enabled: true
        severity: "warning"

      - name: "security_scan"
        enabled: true
        severity: "warning"

  "**/docker-compose*.yml":
    rules:
      - name: "docker_compose_validation"
        enabled: true
        severity: "error"

  # Documentation files
  "**/*.md":
    rules:
      - name: "markdown_lint"
        enabled: true
        severity: "info"

      - name: "broken_links"
        check: true
        severity: "warning"

  # Environment files
  "**/.env*":
    rules:
      - name: "secrets_detection"
        enabled: true
        severity: "error"

      - name: "env_format"
        validate: true
        severity: "warning"

# Dependency management
dependencies:
  python:
    enabled: true
    rules:
      - name: "vulnerable_packages"
        check: true
        severity: "error"

      - name: "outdated_packages"
        check: true
        severity: "info"

      - name: "license_compatibility"
        check: true
        severity: "warning"

      - name: "dependency_conflicts"
        check: true
        severity: "error"

# Code review guidelines
guidelines:
  # General guidelines
  general:
    - "Use descriptive variable and function names in Portuguese when appropriate"
    - "Follow Brazilian date format (DD/MM/YYYY) conventions"
    - "Include comprehensive error messages in Portuguese"
    - "Use type hints for all function parameters and return values"
    - "Write docstrings for all public functions and classes"

  # API-specific guidelines
  api:
    - "Use Pydantic models for all request/response validation"
    - "Implement proper HTTP status codes"
    - "Include rate limiting for all endpoints"
    - "Use async/await for I/O operations"
    - "Implement comprehensive error handling"

  # Security guidelines
  security:
    - "Never log sensitive information"
    - "Use environment variables for all secrets"
    - "Implement proper input validation"
    - "Use parameterized queries for database operations"
    - "Implement CORS properly for production"

  # Performance guidelines
  performance:
    - "Use caching for expensive operations"
    - "Implement pagination for list endpoints"
    - "Use async database operations"
    - "Optimize database queries"
    - "Use connection pooling"

# Custom review prompts
review_prompts:
  - name: "astrology_domain_expertise"
    prompt: |
      As a Brazilian astrology API expert, review this code for:
      1. Correct astronomical calculations
      2. Proper handling of Brazilian timezones
      3. Cultural sensitivity in astrology interpretations
      4. Accuracy of astrological terminology in Portuguese

  - name: "api_design_review"
    prompt: |
      Review this API code for RESTful design principles:
      1. Proper HTTP methods usage
      2. Consistent URL patterns
      3. Appropriate status codes
      4. Proper error response formats
      5. API versioning strategy

  - name: "docker_best_practices"
    prompt: |
      Review Docker configuration for:
      1. Multi-stage build optimization
      2. Security best practices
      3. Image size optimization
      4. Proper resource limits
      5. Health check implementation

# Automated fixes
auto_fixes:
  enabled: true
  rules:
    - name: "import_sorting"
      enabled: true
      tool: "isort"

    - name: "code_formatting"
      enabled: true
      tool: "black"

    - name: "remove_unused_imports"
      enabled: true

    - name: "fix_docstrings"
      enabled: true
      style: "google"

# Integration configurations
integrations:
  # GitHub integration
  github:
    enabled: true
    auto_assign_reviewers: true
    required_checks:
      - "tests"
      - "lint"
      - "security_scan"

  # CI/CD integration
  ci:
    enabled: true
    providers:
      - "github_actions"
      - "gitlab_ci"
    required_status_checks:
      - "build"
      - "test"
      - "security"

# Notification settings
notifications:
  enabled: true
  channels:
    - "github_comments"
    - "email"
  events:
    - "review_complete"
    - "security_issue_found"
    - "performance_issue_found"
    - "test_failure"

# Custom metrics and KPIs
metrics:
  enabled: true
  kpis:
    - name: "code_quality_score"
      target: 85
      severity: "warning"

    - name: "test_coverage"
      target: 80
      severity: "warning"

    - name: "security_score"
      target: 90
      severity: "error"

    - name: "performance_score"
      target: 85
      severity: "warning"

# Review templates
review_templates:
  - name: "feature_pr"
    template: |
      ## Feature Review Checklist

      ### Code Quality
      - [ ] Code follows project conventions
      - [ ] Proper error handling implemented
      - [ ] Type hints added
      - [ ] Tests written and passing
      - [ ] Documentation updated

      ### Security
      - [ ] No hardcoded secrets
      - [ ] Input validation implemented
      - [ ] SQL injection prevention
      - [ ] XSS protection

      ### Performance
      - [ ] No N+1 queries
      - [ ] Caching implemented where appropriate
      - [ ] Database queries optimized

      ### API Design
      - [ ] RESTful endpoints
      - [ ] Proper HTTP status codes
      - [ ] Request/response validation
      - [ ] Rate limiting implemented

  - name: "bug_fix_pr"
    template: |
      ## Bug Fix Review Checklist

      ### Problem Analysis
      - [ ] Root cause identified
      - [ ] Impact assessment done
      - [ ] Test case added to prevent regression

      ### Solution Quality
      - [ ] Fix addresses the root cause
      - [ ] No side effects introduced
      - [ ] Backward compatibility maintained

      ### Testing
      - [ ] Unit tests added/modified
      - [ ] Integration tests passing
      - [ ] Manual testing completed

# Custom rules for specific patterns
custom_rules:
  - name: "brazilian_date_format"
    pattern: "\\b\\d{4}-\\d{2}-\\d{2}\\b"
    message: "Use Brazilian date format DD/MM/YYYY instead of ISO format"
    severity: "warning"
    files: ["**/*.py"]

  - name: "portuguese_error_messages"
    pattern: "raise.*[Ee]rror.*[\"'].*[a-zA-Z]"
    message: "Error messages should be in Portuguese for Brazilian users"
    severity: "info"
    files: ["**/*.py"]

  - name: "astrology_constants"
    pattern: "signs?|planets?|houses?"
    message: "Use proper Portuguese astrology terminology"
    severity: "info"
    files: ["**/*.py"]

# Review scheduling
scheduling:
  enabled: true
  rules:
    - name: "urgent_security"
      pattern: "password|secret|token|key"
      priority: "high"
      reviewers: ["security-team"]

    - name: "api_changes"
      pattern: "api/|endpoint|route"
      priority: "medium"
      reviewers: ["api-team"]

    - name: "database_changes"
      pattern: "database|sql|migration"
      priority: "medium"
      reviewers: ["backend-team"]

# Quality gates
quality_gates:
  enabled: true
  gates:
    - name: "minimum_test_coverage"
      threshold: 80
      metric: "test_coverage"
      action: "block_merge"

    - name: "maximum_complexity"
      threshold: 15
      metric: "cyclomatic_complexity"
      action: "require_review"

    - name: "security_scan_pass"
      required: true
      action: "block_merge"

    - name: "lint_pass"
      required: true
      action: "block_merge"

# Exception handling
exceptions:
  enabled: true
  rules:
    - name: "legacy_code"
      pattern: "legacy/|old/"
      quality_checks: false
      security_checks: true

    - name: "generated_code"
      pattern: "**/generated/"
      all_checks: false

    - name: "test_files"
      pattern: "**/test_*.py"
      docstring_required: false

# Reporting and analytics
reporting:
  enabled: true
  reports:
    - name: "weekly_quality_report"
      schedule: "weekly"
      metrics:
        - "code_quality_score"
        - "test_coverage"
        - "security_score"
        - "performance_score"

    - name: "monthly_trends"
      schedule: "monthly"
      metrics:
        - "code_churn"
        - "bug_fix_rate"
        - "review_velocity"